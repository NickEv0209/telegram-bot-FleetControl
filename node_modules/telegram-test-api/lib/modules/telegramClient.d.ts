import type { MessageEntity, User, Message } from 'typegram';
import type { GetUpdatesResponse } from '../routes/client/getUpdates';
import type { GetUpdatesHistoryResponse } from '../routes/client/getUpdatesHistory';
export declare type CommonMessage = Pick<Message.ServiceMessage, 'chat'> & Partial<Message>;
export interface MessageMeta {
    date: number;
    botToken: string;
}
export interface CallbackQueryRequest extends MessageMeta {
    message: CommonMessage;
    from: User;
    data: string;
}
export declare type MessageRequest = CommonMessage & MessageMeta & {
    text: string;
};
export declare type MessageOptions = Partial<MessageRequest> & {
    message?: Partial<CommonMessage>;
};
export declare type CommandRequest = MessageRequest & MessageMeta & {
    text: string;
    entities: MessageEntity[];
};
export declare type CommandOptions = Partial<CommandRequest> & {
    message?: Partial<CommonMessage>;
};
export interface CommonResponse {
    ok: true;
    result: null;
}
export declare type DeepPartial<T> = {
    [P in keyof T]?: DeepPartial<T[P]>;
};
export interface ClientOptions {
    userId: number;
    timeout: number;
    interval: number;
    chatId: number;
    firstName: string;
    userName: string;
    type: 'private' | 'group' | 'supergroup' | 'channel';
    chatTitle: string;
}
export declare class TelegramClient {
    private userId;
    private timeout;
    private interval;
    private chatId;
    private firstName;
    private userName;
    private chatTitle;
    private url;
    private botToken;
    private type;
    constructor(url: string, botToken: string, options?: Partial<ClientOptions>);
    makeMessage(messageText: string, options?: MessageOptions): {
        text: string;
        botToken: string;
        date: number;
        from: {
            id: number;
            first_name: string;
            username: string;
            is_bot: boolean;
        };
        chat: {
            id: number;
            title: string;
            first_name: string;
            username: string;
            type: "group" | "private" | "supergroup" | "channel";
        };
    } & MessageOptions;
    makeCommand(messageText: string, options?: CommandOptions): {
        text: string;
        entities: {
            offset: number;
            length: number;
            type: "bot_command";
        }[];
        botToken: string;
        date: number;
        from: {
            id: number;
            first_name: string;
            username: string;
            is_bot: boolean;
        };
        chat: {
            id: number;
            title: string;
            first_name: string;
            username: string;
            type: "group" | "private" | "supergroup" | "channel";
        };
    } & CommandOptions;
    makeCallbackQuery(data: string, options?: DeepPartial<CallbackQueryRequest>): {
        from: {
            id: number;
            first_name: string;
            username: string;
            is_bot: boolean;
        };
        message: {
            from: {
                id: number;
                first_name: string;
                username: string;
                is_bot: boolean;
            };
            chat: {
                id: number;
                title: string;
                first_name: string;
                username: string;
                type: "group" | "private" | "supergroup" | "channel";
            };
        };
        data: string;
        botToken: string;
        date: number;
    } & DeepPartial<CallbackQueryRequest>;
    private makeCommonMessage;
    private getMessageMeta;
    sendMessage(message: MessageRequest): Promise<CommonResponse>;
    sendCommand(message: CommandRequest): Promise<CommonResponse>;
    sendCallback(message: CallbackQueryRequest): Promise<CommonResponse>;
    getUpdates(): Promise<GetUpdatesResponse>;
    getUpdatesHistory(): Promise<GetUpdatesHistoryResponse['result']>;
}
