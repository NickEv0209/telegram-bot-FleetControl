"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ensureUpdates = exports.assertEventuallyTrue = exports.getHookOptions = exports.getServerAndBot = exports.getServerAndClient = exports.delay = void 0;
const util_1 = require("util");
const telegraf_1 = __importDefault(require("telegraf"));
const telegramServer_1 = require("../telegramServer");
exports.delay = (0, util_1.promisify)(setTimeout);
let serverPort = 9001;
function getPort() {
    serverPort++;
    return serverPort;
}
async function getServerAndClient(token, serverOptions = {}) {
    const serverConfig = { port: getPort() };
    const server = new telegramServer_1.TelegramServer(Object.assign(Object.assign({}, serverConfig), serverOptions));
    await server.start();
    return { client: server.getClient(token), server };
}
exports.getServerAndClient = getServerAndClient;
async function getServerAndBot(token) {
    const serverConfig = { port: getPort() };
    const server = new telegramServer_1.TelegramServer(serverConfig);
    await server.start();
    const bot = new telegraf_1.default(token, {
        telegram: { apiRoot: server.config.apiURL },
    });
    bot.command('start', (ctx) => ctx.reply('Hi!'));
    bot.on('callback_query', (ctx) => ctx.reply('pong'));
    bot.startPolling();
    return { server, bot };
}
exports.getServerAndBot = getServerAndBot;
function getHookOptions(token) {
    const hookedBotOptions = {
        polling: false,
        webHook: { host: 'localhost', port: getPort() },
    };
    const hookUrl = `http://localhost:${hookedBotOptions.webHook.port}/bot${token}`;
    return { hookedBotOptions, hookUrl };
}
exports.getHookOptions = getHookOptions;
async function assertEventuallyTrue(timeoutDuration, message, func) {
    let waited = 0;
    const waitStep = 50;
    while (!func()) {
        await (0, exports.delay)(waitStep);
        waited += waitStep;
        if (waited > timeoutDuration) {
            throw new Error(message);
        }
    }
}
exports.assertEventuallyTrue = assertEventuallyTrue;
function ensureUpdates(updates) {
    if (!updates.ok) {
        throw new Error(updates.description);
    }
}
exports.ensureUpdates = ensureUpdates;
